<?php
/**
 * Created by IntelliJ IDEA.
 * User: Cyrex
 * Date: 05/02/2016
 * Time: 14:15
 */

namespace modules\braintree_gateway;

defined( 'ABSPATH' ) or die( 'No script kiddies please!' );

function init_braintree_test(){

    class BraintreeTest extends \WC_Payment_Gateway{

        const TITLE = "title";
        const DESCRIPTON = "description";
        const MERCHANT_ID = "merchant_id";
        const PUBLIC_KEY = "public_key";
        const PRIVATE_KEY = "private_key";
        const CSE_KEY = "cse_key";
        const NUMBER_OF_MERCHENT_ACCOUNTS = "number_of_merchent_account";
        const DEFAULT_MERCHENT_ACCOUNT = "default_Merchent_account";

        private $merchant_account_id = "";
        private $n_merchent_accounts = 1;

        private $currency_list = array();

        public function __construct(){

            $this->id = "test";
            $this->has_fields = true;
            $this->method_title = "Braintree Payment";
            $this->method_description = "Braintree payment plugin for woocommerce.";
            $this->init_settings();
            $this->init();
            $this->init_form_fields();

            if ( version_compare( WOOCOMMERCE_VERSION, '2.0.0', '>=' ) ) {

                add_action( 'woocommerce_update_options_payment_gateways_' . $this->id, array( &$this, 'process_admin_options' ) );
            }else {

                add_action( 'woocommerce_update_options_payment_gateways', array( &$this, 'process_admin_options' ) );
            }
        }

        private function init(){

            $this->title = $this->get_option($this::TITLE);
            $this->description = $this->get_option($this::DESCRIPTON);
            $this->merchant_id = $this->get_option($this::MERCHANT_ID);
            $this->public_key = $this->get_option($this::PUBLIC_KEY);
            $this->private_key = $this->get_option($this::PRIVATE_KEY);
            $this->cse_key = $this->get_option($this::CSE_KEY);
            $this->n_merchent_accounts = $this->get_option($this::NUMBER_OF_MERCHENT_ACCOUNTS);
        }

        public function getSettingForm(){

            $results = array(
                $this::TITLE=> array(
                    'title' => 'Braintree',
                    'type' => "text",
                    'description' => 'Braintree payment plugin for woocommerce.',
                    'default' => $this->title
                ),
                $this::DESCRIPTON => array(
                    'title' => 'description',
                    'type' => 'textarea',
                    'description' => 'Braintree payment plugin for woocommerce.',
                    'default' => $this->description
                ),
                'sandbox' => array(
                    'title' => 'sandbox api key',
                    'type' => "text",
                    'default' => ""
                ),
                $this::PUBLIC_KEY => array(
                    'title' => 'Public key',
                    'type' => "text",
                    'default' => $this->public_key
                ),
                $this::PRIVATE_KEY => array(
                    'title' => 'Private key',
                    'type' => "text",
                    'default' => $this->private_key
                ),
                $this::CSE_KEY => array(
                    'title' => "CSE key",
                    'type' => 'text',
                    'default' => $this->cse_key
                ),
                $this::DEFAULT_MERCHENT_ACCOUNT => array(
                    'title' => 'Default Merchent account',
                    'type' => 'text',
                ),
                $this::NUMBER_OF_MERCHENT_ACCOUNTS => array(
                    'title' => 'number of merchent accounts',
                    'type' => 'number',
                    'default' => '1'
                ),
            );
            //adds Merchent's to the form.
            for($i = 0; $i < $this->n_merchent_accounts; $i++){
                $results[] = array(
                    'title' => 'Merchent account ' . $i,
                    'id' => 'merchent_accounts_' . $i,
                    'type' => 'text',
                );
                $results[] = array(
                    'id' => 'wcj_price_by_country_exchange_rate_currency_group_' . $i,
                    'description' => 'Merchent account currency',
                    'type' => 'text',
                );
            }

            return $results;
        }

        public function init_form_fields(){
            parent::init_form_fields(); // TODO: Change the autogenerated stub
            $this->form_fields = $this->getSettingForm();
        }

        public function admin_options(){
            ?>

            <h2>Braintree</h2>
            <table class="form-table">
                <?php $this->generate_settings_html(); ?>
            </table>

            <?php
        }

        private function get_multi_currency($order=null){

            if($order!=null){

                $results = array();

                for($i = 0; i < $this->n_merchent_accounts; $i++){

                    $results[] = array(

                        get_option('wcj_price_by_country_exchange_rate_currency_group_' . $i) => get_option('merchent_accounts_' . $i),
                    );
                }

                $this->merchant_account_id = $results[$order->get_order_currency()];

            }else{

                $this->merchant_account_id = $this->get_option($this::DEFAULT_MERCHENT_ACCOUNT);
            }

            return $this->merchant_account_id;
        }

        public function process_payment($order=''){

            $order = wc_get_order( $order );

            Braintree_Configuration::environment('sandbox');
            Braintree_Configuration::merchantId($this->merchant_id);
            Braintree_Configuration::publicKey($this->public_id);
            Braintree_Configuration::privateKey($this->private_id);

            $result = Braintree_Transaction::sale([
                'amount' => $order->order_total,
                "merchantAccountId" => $this->check_currency($order),
                "creditCard" => array(
                    "number" => $_POST["braintree-card-number"],
                    "cvv" => $_POST["braintree-card-cvc"],
                    "expirationMonth" => $_POST["braintree-card-expiry-month"],
                    "expirationYear" => $_POST["braintree-card-expiry-year"]
                ),
                "options" => array(
                    "submitForSettlement" => true
                )
            ]);

            if ($result->success) {

                echo("Success! Transaction ID: " . $result->transaction->id);
                // Payment complete
                $order->payment_complete( $result->transaction->id );
                // Add order note
                $order->add_order_note( sprintf( __( '%s payment approved! Trnsaction ID: %s', 'woocommerce' ), $this->title, $result->transaction->id ) );
                // Remove cart
                WC()->cart->empty_cart();
                // Return thank you page redirect
                return array(
                    'result'   => 'success',
                    'redirect' => $this->get_return_url( $order )
                );

            } else if ($result->transaction) {
                $order->add_order_note( sprintf( __( '%s payment declined.<br />Error: %s<br />Code: %s', 'woocommerce' ), $this->title, $result->message, $result->transaction->processorResponseCode ) );
            } else {
                foreach ( ($result->errors->deepAll() ) as $error ) {
                    wc_add_notice( "Validation error - " . $error->message, 'error' );
                }
                return array(
                    'result'   => 'fail',
                    'redirect' => ''
                );
            }
        }
    }
}